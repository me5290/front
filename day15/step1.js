/*
    - 자료형
        0. undefined    : 자료 없음
        1. 숫자형
        2. 문자열
        3. 불
        4. 배열[]       : 여러개의 자료를 하나의 자료로 집합
        5. 함수(){}     : 코드 집합
        6. 객체{}

    함수
        - 코드 묶음
        - 용어
            - 함수 호출 : 함수 사용할때 f(x)
            - 매개변수  : 함수 호출할때 괄호 내부에 여러가지 *자료를 넣을때
                ↳ 변수 , 상수 , 함수 , 객체 , 배열 == 자료
            - 리턴값    : 함수 호출해서 최종적으로 나오는 결과

        - 종류
            1. 매개변수o리턴o
                function 함수(x,y){z = x+y; return z;}
            2. 매개변수o리턴x
                function 함수(x,y){z = x+y;}
            3. 매개변수x리턴o
                function 함수(){return 3+3;}
            4. 매개변수x리턴x
                function 함수(){}

        - 함수 사용하면 좋은점
            1. 반복되는 코드를 한번에 정의 하고 필요에따라 호출해서 반복잡업을 피할수 있다[코드양을 줄일수 있다]
            2. 긴 프로그램을 기능별로 나눠 여러 함수로 나눠 작성하면 모듈화[조각단위]로 전체 코드의 가독성이 좋다
            3. 기능별(함수별)로 수정이 가능하므로 유지보수가 쉽다

        1. 익명함수 : 이름이 없는 함수
            - function(){}   : 함수에 이름이 없어서 호출이 불가능
            - 익명함수를 변수/상수에 넣으면 변수/상수 호출시 함수가 실행
                - const 함수명 = function(){}

        2. 선언적함수 : 이름이 있는 함수
            -function 함수명(){}    : 함수에 이름이 있는 상태
 */

//197P : 익명함수
const 함수 = function(){
    console.log('함수 내부의 코드입니다1');
    console.log('함수 내부의 코드입니다2');
    console.log('함수 내부의 코드입니다3');
    console.log('');
}

함수(); //함수 호출
console.log(typeof 함수);
console.log(함수);

//199P : 선언적함수
function 선언함수() {
    console.log('선언함수 내부의 코드입니다1');
    console.log('선언함수 내부의 코드입니다2');
    console.log('선언함수 내부의 코드입니다3');
    console.log('');
}

선언함수();
console.log(typeof 함수);
console.log(선언함수);

//201P : 
    // 1. 함수명 : 'f' , 매개변수 : 'x' , 리턴값 : 'x+x'
function f(x){
    return x + x;
}

console.log(f(3));